#!/usr/bin/env python
#
# A caja launcher/monitor that saves the current session on the fly.
#
# - uses my own fork of caja:
#   https://github.com/soimort/caja (1.16, GTK 2)  or  https://github.com/soimort/mi-caja (1.26, GTK 3)
# - reads/writes in mur format: https://github.com/soimort/mur
# - dependencies: python (3.5+), zenity

import argparse
import datetime
import select
import subprocess
import sys
import tempfile
import time
from os import environ, makedirs, path, setpgrp
from pathlib import Path
from urllib.parse import quote, unquote


# ANSI escape code
RESET = 0
BOLD = 1
UNDERLINE = 4
NEGATIVE = 7
NO_BOLD = 21
NO_UNDERLINE = 24
POSITIVE = 27
BLACK = 30
RED = 31
GREEN = 32
YELLOW = 33
BLUE = 34
MAGENTA = 35
CYAN = 36
LIGHT_GRAY = 37
DEFAULT = 39
BLACK_BACKGROUND = 40
RED_BACKGROUND = 41
GREEN_BACKGROUND = 42
YELLOW_BACKGROUND = 43
BLUE_BACKGROUND = 44
MAGENTA_BACKGROUND = 45
CYAN_BACKGROUND = 46
LIGHT_GRAY_BACKGROUND = 47
DEFAULT_BACKGROUND = 49

def print_with_colors(text, *colors):
    """Print text with colors."""
    print("\33[{}m{content}\33[{}m".format(
        ";".join([str(color) for color in colors]), RESET, content=text))

def print_inline_with_colors(text, *colors):
    """Print inline text with colors."""
    print("\33[{}m{content}\33[{}m".format(
        ";".join([str(color) for color in colors]), RESET, content=text), end='', flush=True)


home = Path.home()
config_dir = environ.get('XDG_CONFIG_HOME') or '%s/.config' % Path.home()
mi_casa_dir = '%s/mi-casa' % config_dir
mi_casa_snap_dir = '%s/snapshots' % mi_casa_dir
try:
    makedirs(mi_casa_snap_dir, mode=0o755, exist_ok=True)
except:
    print_with_colors('[fatal] failed to create config dir at %s' % mi_casa_snap_dir, YELLOW)
    exit(1)


all_workspaces = {}  # stores all workspace locations, indexed by workspace name
ws = []              # an ordered list of all workspace names
ns = {}              # stores active workspace name, indexed by notebook
nn = {}              # stores active notebook, indexed by workspace name
s = {}               # stores (slot, uri), indexed by notebook & page_num

def search(slot):
    """Find a given slot in s and return its (notebook, page_num)."""

    for notebook in s:
        for page_num, data in enumerate(s[notebook]):
            if slot == data[0]:
                return notebook, page_num
    return None

def read_mur_file(f):
    """Read from a session file and return a dictionary of all workspaces."""
    global ws

    workspaces = {}  # stores workspace num and locations, indexed by workspace name
    current_workspace_num, current_workspace_name = 0, None
    is_reading_yaml = False
    for line in list(f):
        if is_reading_yaml:
            text = line.rstrip()

            if text == '---':
                is_reading_yaml = False  # YAML front matter ends
            else:
                pass  # TODO: read YAML metadata

        else:
            text = line.strip()  # strip indentation as well

            # skip empty lines and comments
            if text == '' or text.startswith('# '):
                continue

            if text == '---':
                if not workspaces:
                    is_reading_yaml = True  # YAML front matter begins
                else:
                    break  # end of valid document

            elif text == '***':
                # workspace delimiter
                current_workspace_num += 1
                current_workspace_name = None

            elif text.startswith('* ') or text.startswith('/') or text.startswith('sftp://'):
                if text.startswith('* '):
                    # bulleted URL entry
                    loc = text[2:]
                else:
                    loc = text

                if not current_workspace_name:
                    # use directory name as workspace name. path may end with '/'
                    current_workspace_name = loc.split('/')[-1] or loc.split('/')[-2]
                    if current_workspace_name in workspaces:
                        # resolve name conflict
                        i = 2
                        while '%s (%s)' % (current_workspace_name, i) in workspaces:
                            i += 1
                        current_workspace_name = '%s (%s)' % (current_workspace_name, i)

                    ws.append(current_workspace_name)
                    workspaces[current_workspace_name] = { 'num': current_workspace_num, 'locations': [] }

                # assume it's a valid location at this point
                workspaces[current_workspace_name]['locations'].append(loc)

            else:
                # plain text line
                if not current_workspace_name:
                    # use text as workspace name
                    current_workspace_name = text
                    if current_workspace_name in workspaces:
                        # resolve name conflict
                        i = 2
                        while '%s (%s)' % (current_workspace_name, i) in workspaces:
                            i += 1
                        current_workspace_name = '%s (%s)' % (current_workspace_name, i)

                    ws.append(current_workspace_name)
                    workspaces[current_workspace_name] = { 'num': current_workspace_num, 'locations': [] }

    return workspaces

def write_mur_file(f, debug=True):
    """Write to a session file."""

    mur, mur_screen = '# THIS FILE IS AUTO-GENERATED BY A MONITOR. DO NOT EDIT!\n\n', ''
    for workspace_name in ws:
        # save workspaces in order
        if workspace_name in nn:
            # loaded
            notebook = nn[workspace_name]
            uris = [unquote(page[1]) for page in s[notebook]]
        elif workspace_name in all_workspaces:
            # not loaded
            uris = [unquote(loc) for loc in all_workspaces[workspace_name]['locations']]
        else:
            # invalid / removed
            continue

        mur += workspace_name + '\n'; mur_screen += workspace_name + '\n'
        for uri in uris:
            if uri.startswith('file://'):
                uri = uri[7:]
            mur += uri + '\n'; mur_screen += uri + '\n'
        mur += '\n***\n'; mur_screen += '***\n'

    if debug:
        print(mur_screen)
    try:
        f.write(mur)
    except OSError as err:
        subprocess.run(['zenity', '--error', '--text=Monitor has stopped.\n\nOS error: {0}'.format(err)])


def main():
    global all_workspaces, ws, ns, nn, s

    # parse arguments to get workspace_filename & workspace_names
    parser = argparse.ArgumentParser(prog='mi-casa', usage='mi-casa SESSION',
                                     description='',
                                     add_help=True)
    #parser.add_argument('--foo', help='foo help')
    parser.add_argument('--dry-run', action='store_true', default=False,
                        help='print only the parsed result of workspaces and exit')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='show detailed information for debugging')
    parser.add_argument('--no-rlwrap', action='store_true', default=False,
                        help='do not invoke rlwrap')
    parser.add_argument('-w', '--workspace-name', action='append', dest='workspace_names',
                        metavar='WORKSPACE_NAME', help='open a workspace')
    parser.add_argument('SESSION', nargs='?', help=argparse.SUPPRESS)
    #parser.add_argument('SESSIONS', nargs='*', help=argparse.SUPPRESS)
    args = parser.parse_args()

    # invoke rlwrap if possible
    if not args.no_rlwrap:
        try:
            subprocess.run(['rlwrap', '--version'], capture_output=True)
        except FileNotFoundError:
            print_with_colors('[warning] rlwrap not found', BOLD, YELLOW)
        else:
            wrapped_args = sys.argv + ['--no-rlwrap']  # important!
            if args.debug:
                print_with_colors('[info] invoking rlwrap on: %s' % wrapped_args, BOLD, GREEN)
            try:
                subprocess.run(['rlwrap'] + wrapped_args)
            except KeyboardInterrupt:  # when SIGINT received (TODO: how to make rlwrap python ignore SIGINT?)
                print_with_colors('[warning] monitor forcibly closed.', BOLD, YELLOW)
            return

    if args.SESSION is None:
        # create temporary session file
        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as f:
            f.write('default\n')
            workspace_filename = f.name
        print_with_colors('[warning] creating temp session file "%s"' % workspace_filename, BOLD, YELLOW)
        workspace_names = []

    else:
        # use existing session file
        workspace_filename, workspace_names = args.SESSION, args.workspace_names or []

    # read session file
    try:
        with open(workspace_filename) as f:
            all_workspaces = read_mur_file(f)
    except FileNotFoundError:
        workspace_filename = path.join(Path.home(), '%s.mur' % workspace_filename)
        try:
            with open(workspace_filename) as f:
                all_workspaces = read_mur_file(f)
        except FileNotFoundError:
            # create new session file
            with open(workspace_filename, 'w') as f:
                f.write("# THIS FILE IS AUTO-GENERATED BY A MONITOR. DO NOT EDIT!\n\n")
                f.write("default\n")
            with open(workspace_filename) as f:
                all_workspaces = read_mur_file(f)

    print_with_colors("all workspaces: %s" % all_workspaces, BLUE)

    # check if specified workspace names exist
    for workspace_name in workspace_names:
        if workspace_name not in all_workspaces:
            print_with_colors('[fatal] workspace name "%s" not found' % workspace_name, YELLOW)
            exit(1)
    if not workspace_names:  # default: use all workspaces
        workspace_names = list(all_workspaces.keys())
    print_with_colors("workspace names: %s" % workspace_names, BLUE)

    # check the existence of locations, quote and convert them to full URIs
    for workspace_name in all_workspaces:
        if 'locations' not in all_workspaces[workspace_name]: continue

        for (i, loc) in enumerate(all_workspaces[workspace_name]['locations']):
            if loc.startswith('sftp://'):
                uri = 'sftp://%s' % quote(loc[7:])
                # TODO: check existence?
            else:
                if Path(loc).exists():
                    uri = 'file://%s' % quote(loc)
                else:
                    print_with_colors('[fatal] local path "%s" not found' % loc, YELLOW)
                    exit(1)
            all_workspaces[workspace_name]['locations'][i] = uri

    # validate that there is at least one workspace
    if not workspace_names:
        print_with_colors('[fatal] session file "%s" should contain at least one workspace name' % workspace_filename, YELLOW)
        exit(1)

    # every workspace should have at least one location; if not, use HOME as default
    for workspace_name in workspace_names:
        if not all_workspaces[workspace_name]['locations']:
            all_workspaces[workspace_name]['locations'] = ['file://%s' % quote(str(Path.home()))]

    if args.dry_run:
        return

    # open caja processes
    procs = []
    caja_version = subprocess.check_output(['caja', '--version'])\
                             .rstrip().decode('utf-8').split(' ')[-1].split('.')
    if caja_version[0] == '1' and caja_version[1] >= '22':  # has '-t' option (actually >= v1.21.3)
        # FIXME: each command has a limited maximum length
        for workspace_name in workspace_names:
            # window order is deterministic
            params = ['caja', '-t']
            params.extend(all_workspaces[workspace_name]['locations'])

            if args.debug:
                procs.append(subprocess.Popen(params, stdout=subprocess.PIPE,
                                              preexec_fn=setpgrp))  # do not forward SIGINT to caja
            else:  # suppress stderr
                procs.append(subprocess.Popen(params, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL,
                                              preexec_fn=setpgrp))  # do not forward SIGINT to caja

    else:  # caja_application_load_session() that loads last-session
        caja_session_filename = '%s.caja' % workspace_filename
        params = ['caja', '--session', caja_session_filename]
        with open(caja_session_filename, 'w') as f:
            f.write("""<?xml version='1.0' encoding='UTF-8'?>
<session>
  <history></history>\n""")
        with open(caja_session_filename, 'a') as f:
            for workspace_name in workspace_names:
                # window order is nondeterministic!
                f.write("  <window type='navigation' geometry='1366x704+0+0' location='file://%s'>\n" % Path.home())
                for loc in all_workspaces[workspace_name]['locations']:
                    f.write("    <slot location='%s'/>\n" % loc)
                f.write("  </window>\n")
            f.write("</session>\n")

        # check if session file has acceptable size (oversized file will crash caja)
        caja_session_filesize = path.getsize(caja_session_filename)
        if caja_session_filesize >= 65536:  # this is hardcoded!
            print_with_colors('[fatal] oversized session file (%s)' % caja_session_filesize, YELLOW)
            exit(1)

        if args.debug:
            procs.append(subprocess.Popen(params, stdout=subprocess.PIPE,
                                          preexec_fn=setpgrp))  # do not forward SIGINT to caja
        else:  # suppress stderr
            procs.append(subprocess.Popen(params, stdout=subprocess.PIPE, stderr=subprocess.DEVNULL,
                                          preexec_fn=setpgrp))  # do not forward SIGINT to caja

    # main loop
    notebook = None  # stores last notebook
    lastp = {}       # stores last page_num, indexed by notebook
    flag, last_proc_ts = False, time.time()
    is_loading_finished = False
    is_just_last_slot, is_window_just_closing, is_window_closing = False, False, False
    while True:
        try:
            if sys.stdin in select.select([sys.stdin], [], [], 0)[0]:
                # non-blocking read of user input
                line = sys.stdin.readline()
                if line:
                    text = line.rstrip()

                    if text.startswith('name '):
                        new_name = text[5:]
                        if new_name in ws:
                            # resolve name conflict
                            i = 2
                            while '%s (%s)' % (new_name, i) in ws:
                                i += 1
                            new_name = '%s (%s)' % (new_name, i)

                        if notebook in ns:
                            old_name = ns[notebook]['name']
                            ns[notebook]['name'] = new_name
                            del nn[old_name]
                            nn[new_name] = notebook
                            all_workspaces[new_name] = all_workspaces[old_name]
                            del all_workspaces[old_name]
                            ws[ws.index(old_name)] = new_name
                        else:
                            print_with_colors('[error] notebook does not exist', YELLOW)

                    elif text == 'stat':
                        stat_sum = 0
                        for _workspace_name in ws:
                            if _workspace_name in nn:
                                # loaded
                                _notebook = nn[_workspace_name]
                                stat_len = len(s[_notebook])
                                stat_loaded = True
                                stat_sum += stat_len
                            elif _workspace_name in all_workspaces:
                                # not loaded
                                stat_len = len(all_workspaces[_workspace_name]['locations'])
                                stat_loaded = False
                            else:
                                # invalid / removed
                                continue

                            if stat_loaded:
                                print('%-20s : %s' % (_workspace_name, stat_len))
                            else:
                                print('%-20s : (%s)' % (_workspace_name, stat_len))
                        print('%-20s   %s' % ('', stat_sum))

                    elif text.startswith('find '):
                        target = text[5:]
                        for _workspace_name in ws:
                            if _workspace_name in nn:
                                # loaded
                                _notebook = nn[_workspace_name]
                                uris = [unquote(page[1]) for page in s[_notebook]]
                                find_loaded = True
                            elif _workspace_name in all_workspaces:
                                # not loaded
                                uris = [unquote(loc) for loc in all_workspaces[_workspace_name]['locations']]
                                find_loaded = False
                            else:
                                # invalid / removed
                                continue

                            uris_found = []
                            for uri in uris:
                                if target in uri: uris_found.append(uri)
                            if len(uris_found) > 0:
                                if find_loaded:
                                    print('%-20s : ' % _workspace_name)
                                else:
                                    print('%-20s : (not loaded)' % _workspace_name)
                                for uri_found in uris_found:
                                    print(uri_found)

                    elif text == 'time':
                        current_time = datetime.datetime.now()
                        print(current_time)

                    elif text == 'snap':
                        current_time = datetime.datetime.now()
                        snap_filename = '%s/%s.mur' % (mi_casa_snap_dir, '_'.join(str(current_time).split()))
                        with open(snap_filename, 'w') as f:
                            write_mur_file(f, debug=False)
                        print('snapshot saved: %s' % snap_filename)

                    elif text == 'save':
                        with open(workspace_filename, 'w') as f:
                            write_mur_file(f, debug=False)
                        print('workspace saved: %s' % workspace_filename)

                    elif text == 'filename':
                        print(workspace_filename)

                    elif text == 'exit':
                        with open(workspace_filename, 'w') as f:
                            write_mur_file(f, debug=False)
                        print('workspace saved: %s' % workspace_filename)

                        print_with_colors('[warning] closing monitor...', BOLD, YELLOW)
                        exit(0)

                    ### TODO
                    elif text == 'help':
                        print('name NEW_NAME\t Rename the current workspace')
                        print('stat\t\t Show the session statistics')
                        print('find\t\t Find a target URI in the session')
                        print('time\t\t Show the current time')
                        print('snap\t\t Take a snapshot')
                        print('save\t\t Save to the session file')
                        print('filename\t Show the session filename')
                        print('exit\t\t Save to the session file and exit')

                    elif text:
                        print_with_colors('[error] unrecognized command', YELLOW)

                    current_workspace_name = ns[notebook]['name'] if notebook in ns else ''
                    print_inline_with_colors('%s> ' % current_workspace_name, BOLD)  # print prompt again
                else:
                    # an empty line means stdin has been closed (caused by Ctrl-D)
                    print_with_colors('\n[warning] stdin has been closed. closing monitor...', BOLD, YELLOW)
                    break

            # FIXME: with sleep() there's always some delay until new output ready
            for proc_stdout in select.select([proc.stdout for proc in procs], [], [], 0)[0]:
                # non-blocking read from external process
                line = proc_stdout.readline()
                if line:
                    text = str(line, encoding='utf-8').rstrip()

                    if text[:3] == ">>>":  # recognized log
                        try:
                            action, info = text[4:].split(': ')
                        except:
                            action, info = text[4:], ''  # empty info

                        if not flag: print()  # new line after prompt
                        print_with_colors(text[4:], GREEN)

                        if action == "last slot":
                            is_just_last_slot = True
                            continue

                        if action == "window closing...":
                            # also triggered when using ctrl-w to close the last slot
                            # but don't say window is just closing (it's closed already)
                            is_window_just_closing = not is_just_last_slot

                            is_just_last_slot = False
                            continue

                        is_just_last_slot = False

                        if action == "location updated":
                            # which notebook window and page_num? use window slot to decide
                            slot, uri = info.split(' ')
                            notebook, page_num = search(slot)  # should never fail
                            s[notebook][page_num] = (slot, uri)

                            if not is_loading_finished:
                                # continue loading
                                uris = [unquote(page[1]) for page in s[notebook]]
                                try:
                                    i = [[unquote(loc) for loc in v['locations']]
                                         for v in all_workspaces.values()].index(uris)
                                except ValueError:
                                    pass
                                else:
                                    # a workspace fully loaded
                                    workspace_name = list(all_workspaces.keys())[i]
                                    notebook = search(slot)[0]
                                    ns[notebook] = { 'name': workspace_name }

                                    if len(ns) == len(workspace_names):
                                        # all workspaces fully loaded
                                        is_loading_finished = True
                                        print_with_colors("all workspaces loaded: %s" % ns, GREEN, BOLD)

                                        nn = { ns[notebook]['name']: notebook for notebook in ns }

                        elif action == "slot added":
                            # each window slot belongs to a notebook window
                            notebook, slot = info.split(' ')
                            # reserve variable slot to be used by 'page added'

                        else:
                            # FIXME: this may raise a "ValueError: not enough values to unpack"
                            # we should check if we have a valid action here
                            notebook, page_num = info.split(' ')
                            page_num = int(page_num)

                            if action == "page added":
                                # URI yet to be set by 'location updated'
                                # slot from previous 'slot added'
                                if notebook not in s:
                                    # new notebook
                                    s[notebook] = [(slot, '?')]

                                    if is_loading_finished:
                                        workspace_name = 'new workspace'
                                        if workspace_name in ws:
                                            # resolve name conflict
                                            i = 2
                                            while '%s (%s)' % (workspace_name, i) in ws:
                                                i += 1
                                            workspace_name = '%s (%s)' % (workspace_name, i)

                                        ns[notebook] = { 'name': workspace_name }
                                        nn[workspace_name] = notebook
                                        all_workspaces[workspace_name] = {}
                                        ws.append(workspace_name)

                                else:
                                    # existing notebook
                                    s[notebook].insert(page_num, (slot, '?'))

                            elif action == "page removed":
                                if not is_window_closing:
                                    # save workspace before removing anything
                                    workspace_name = ns[notebook]['name']
                                    all_workspaces[workspace_name]['locations'] = [page[1] for page in s[notebook]]

                                    is_deleting_workspace = len(s[notebook]) == 1 and\
                                        subprocess.run(['zenity', '--question',
                                                        '--text=Delete this workspace?']).returncode == 0
                                    if is_deleting_workspace:
                                        # delete workspace
                                        del all_workspaces[workspace_name]
                                        ws.remove(workspace_name)

                                if is_window_just_closing:
                                    is_window_closing = True
                                    is_window_just_closing = False

                                # remove page from notebook
                                print_with_colors("tab closed: %s" % s[notebook][page_num][1], GREEN, BOLD)
                                s[notebook].pop(page_num)
                                if s[notebook] == []:
                                    # if it's the last page, remove notebook then
                                    del s[notebook]
                                    del nn[ns[notebook]['name']]
                                    del ns[notebook]

                                    print_with_colors("workspace closed: %s" % ns, GREEN, BOLD)
                                    is_window_closing = False

                            elif action == "page reordered":
                                # swap with last page_num in notebook
                                # notebook must be the same!
                                tmp = s[notebook].pop(lastp[notebook])
                                s[notebook].insert(page_num, tmp)

                            elif action == "page switched":
                                # nothing, just
                                pass
                            # set last page_num in notebook
                            lastp[notebook] = page_num

                        if is_loading_finished and not is_window_closing:
                            if args.debug:
                                print_with_colors("s: %s" % s, BLUE)

                            if not s:
                                print_with_colors('[warning] no more active workspace. you might close the monitor now.', BOLD, YELLOW)

                            with open(workspace_filename, 'w') as f:
                                write_mur_file(f, debug=args.debug)

                        flag, last_proc_ts = True, time.time()
                else:
                    # an empty line means nothing (???)
                    pass

            current_ts = time.time()
            if flag and current_ts - last_proc_ts > .25:
                current_workspace_name = ns[notebook]['name'] if notebook in ns else ''
                print_inline_with_colors('%s> ' % current_workspace_name, BOLD)  # print prompt
                flag = False

            if is_loading_finished and not is_window_closing:
                time.sleep(0.2)  # don't wanna burn my CPU

        except KeyboardInterrupt:
            print_with_colors('\n[warning] Ctrl-C pressed!', BOLD, YELLOW)
            pass
        except Exception as err:
            # child process may produce invalid output to parse, pass rather than crash
            print_with_colors('[error] exception while parsing the log:', YELLOW)
            print_with_colors(err, YELLOW)
            pass


if __name__ == '__main__':
    main()
